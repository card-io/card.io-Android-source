# PROGUARD
# Proguard configuration for the card.io.jar, part of the card.io Android SDK

## Don't dont (DO) optimize, shrink, and obfuscate. F'YEAH
-dontoptimize
# -dontshrink
-dontobfuscate

-dontpreverify

# Dalvik can't handle arithmetic optimizations or aggressive overloading
-optimizations !code/simplification/arithmetic

# --- CARD.IO CONFIG ------------------------------------------------------

# Don't obfuscate DetectionInfo or public fields, since
# it is used by native methods
-keep class io.card.payment.DetectionInfo
-keepclassmembers class io.card.payment.DetectionInfo {
    public *;
}

-keep class io.card.payment.CreditCard
-keep class io.card.payment.CreditCard$1
-keepclassmembers class io.card.payment.CreditCard {
	*;
}

-keepclassmembers class io.card.payment.CardScanner {
	*** onEdgeUpdate(...);
}

# Remove debug, verbose, and info Log calls
-assumenosideeffects class android.util.Log {
    public static *** d(...);
    public static *** v(...);
    public static *** i(...);
    ## Uncomment to remove warnings and errors as well
    # public static *** w(...);
    # public static *** e(...);
}

# --- RECOMMENDED ANDROID CONFIG ------------------------------------------

-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider

-keep public class * extends android.view.View {
    public <init>(android.content.Context);
    public <init>(android.content.Context, android.util.AttributeSet);
    public <init>(android.content.Context, android.util.AttributeSet, int);
    public void set*(...);
}

-keepclasseswithmembers class * {
    public <init>(android.content.Context, android.util.AttributeSet);
}

-keepclasseswithmembers class * {
    public <init>(android.content.Context, android.util.AttributeSet, int);
}

-keepclassmembers class * implements android.os.Parcelable {
    static android.os.Parcelable$Creator CREATOR;
}

-keepclassmembers class **.R$* {
    public static <fields>;
}


# --- TYPICAL LIBRARY CONFIG ---------------------------------------------

# The -keepparameternames option keeps the parameter names in the
# "LocalVariableTable" and "LocalVariableTypeTable" attributes of public library
# methods. Some IDEs can present these names to the developers who use the
# library.

-keep public class io.card.payment.* {
    public protected *;
}

# Obfuscation options

-keepparameternames
# 
# -renamesourcefileattribute SourceFile
# -keepattributes Exceptions,InnerClasses,Signature,Deprecated,
#                 SourceFile,LineNumberTable,*Annotation*,EnclosingMethod

# The -keepclassmembernames option for the class$ methods is not strictly
# necessary. These methods are inserted by the javac compiler and the jikes
# compiler respectively, in JDK 1.2 and older, to implement the .class
# construct. ProGuard will automatically detect them and deal with them, even
# when their names have been obfuscated. However, other obfuscators may rely on
# the original method names. It may therefore be helpful to preserve them, in
# case these other obfuscators are ever used for further obfuscation of the
# library.

-keepclassmembernames class * {
    java.lang.Class class$(java.lang.String);
    java.lang.Class class$(java.lang.String, boolean);
}

# Don't mess with classes with native methods

-keepclasseswithmembers class * {
    native <methods>;
}

-keepclasseswithmembernames class * {
    native <methods>;
}

# ensure all rewritten classes have the given prefix. 
# Important if proguard is run multiple times, say by card.io and then the including app.

-repackageclasses 'io.card.payment'

# If your application, applet, servlet, library, etc., contains enumeration
# classes, you'll have to preserve some special methods. Enumerations were
# introduced in Java 5. The java compiler translates enumerations into classes
# with a special structure. Notably, the classes contain implementations of some
# static methods that the run-time environment accesses by introspection (Isn't
# that just grand? Introspection is the self-modifying code of a new
# generation). You have to specify these explicitly, to make sure they aren't
# removed or obfuscated:

-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

# More complex applications, applets, servlets, libraries, etc., may contain
# classes that are serialized. Depending on the way in which they are used, they
# may require special attention

-keepclassmembers class * implements java.io.Serializable {
    static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readResolve();
}
